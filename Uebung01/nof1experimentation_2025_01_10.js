(()=>{"use strict";function e(e,t){return-1!=e.indexOf(t)}!function(e,t,r){var n,s=256,i="random",a=r.pow(s,6),o=r.pow(2,52),l=2*o,u=s-1;function c(u,c,g){var f=[],w=d(p((c=1==c?{entropy:!0}:c||{}).entropy?[u,m(t)]:null==u?function(){try{n=require("crypto");var r=crypto.randomByte;return n&&(r=n.randomBytes)?r=r(s):(r=new Uint8Array(s),(e.crypto||e.msCrypto).getRandomValues(r)),m(r)}catch(r){var i=e.navigator,a=i&&i.plugins;return[+new Date,e,a,e.screen,m(t)]}}():u,3),f),b=new h(f),y=function(){for(var e=b.g(6),t=a,r=0;e<o;)e=(e+r)*s,t*=s,r=b.g(1);for(;e>=l;)e/=2,t/=2,r>>>=1;return(e+r)/t};return y.int32=function(){return 0|b.g(4)},y.quick=function(){return b.g(4)/4294967296},y.double=y,d(m(b.S),t),(c.pass||g||function(e,t,n,s){return s&&(s.S&&_(s,b),e.state=function(){return _(b,{})}),n?(r[i]=e,t):e})(y,w,"global"in c?c.global:this==r,c.state)}function h(e){var t,r=e.length,n=this,i=0,a=n.i=n.j=0,o=n.S=[];for(r||(e=[r++]);i<s;)o[i]=i++;for(i=0;i<s;i++)o[i]=o[a=u&a+e[i%r]+(t=o[i])],o[a]=t;(n.g=function(e){for(var t,r=0,i=n.i,a=n.j,o=n.S;e--;)t=o[i=u&i+1],r=r*s+o[u&(o[i]=o[a=u&a+t])+(o[a]=t)];return n.i=i,n.j=a,r})(s)}function _(e,t){return t.i=e.i,t.j=e.j,t.S=e.S.slice(),t}function p(e,t){var r,n=[],s=typeof e;if(t&&"object"==s)for(r in e)try{n.push(p(e[r],t-1))}catch(e){}return n.length?n:"string"==s?e:e+"\0"}function d(e,t){for(var r,n=e+"",s=0;s<n.length;)t[u&s]=u&(r^=19*t[u&s])+n.charCodeAt(s++);return m(t)}function m(e){return String.fromCharCode.apply(0,e)}if(d(r.random(),t),"object"==typeof module&&module.exports){module.exports=c;try{n=require("crypto")}catch(e){}}else"function"==typeof define&&define.amd?define((function(){return c})):r["seed"+i]=c}("undefined"!=typeof self?self:void 0,[],Math);class t{constructor(e){this.set_active_function=()=>{},this.forwarder_name=e}input(e){this.automata.input(e)}add_activation_function(e){}set_active(){}}class r{constructor(e){this.current_state=-1,this.transitions=[],this.states=[],this.start_state=e.start,this.states=e.states;for(let e=0;e<this.states.length;e++)this.transitions.push([]);for(let t of e.transitions)this.transitions[t.from].push(t);this.init_function=e.init_function,this.end_states=e.end_states}input(e){let t=this.first_match(e),r=this.current_state;null!=t&&(this.current_state=t.next_state,t.action(r,e,this.current_state))}start(){this.current_state=this.start_state}first_match(e){for(let t=0;t<this.transitions[this.current_state].length;t++)if(this.transitions[this.current_state][t].accepts(e))return this.transitions[this.current_state][t];return null}initialize(){this.current_state=this.start_state,this.init_function()}add_finish_action(e){for(let t of this.transitions)for(let r of t)if(this.is_transition_to_end(r)){let t=r.action;r.action=(r,n,s)=>{t(r,n,s),e()}}}is_transition_to_end(t){return e(this.end_states,t.next_state)}add_action_to_transitions(e,t){for(let r of this.transitions)for(let n of r)if(e(n)){let e=n.action;n.action=(r,n,s)=>{e(r,n,s),t()}}}}class n extends t{constructor(e,t,r,n){super(e),this.pre_run_instructions=r,this.post_run_instructions=n,this.measurement=t,this.automata=this.create_automata(),this.automata.initialize()}set_active(){this.show_intro()}create_automata(){return new r(this.automata_configurator())}output_writer(){return this.measurement.output_writer()}show_intro(){this.output_writer().clear_all(),this.output_writer().print_string_to_state(this.forwarder_name),this.pre_run_instructions()}empty_screen_and_show_instructions(e){this.output_writer().clear_state(),this.output_writer().clear_stage(),null==e||null==e?console.log("something is strange"):e()}}class s{constructor(e,t,r,n,s){this.states=e,this.start=t,this.init_function=r,this.transitions=n,this.end_states=s}}class i{}class a extends i{constructor(e){super(),this.acceptor_function=e}accepts(e){return this.acceptor_function(e)}}class o{constructor(e,t,r,n){this.from=e,this.acceptor=t,this.next_state=r,this.action=n}is_valid_input(e){return this.acceptor.accepts(e)}accepts(e){return this.acceptor.accepts(e)}}function l(e,t,r,n){return new o(e,new a(t),r,((e,t,r)=>n(t)))}function u(t){return{to:r=>({on:e=>({if:n=>({do:s=>l(t,(t=>t==e&&n(t)),r,s)}),do:n=>l(t,(t=>t==e),r,n)}),on_any:n=>({if:s=>({do:i=>l(t,(t=>e(n,t)&&s(t)),r,i)}),do:s=>l(t,(t=>e(n,t)),r,s)})})}}class c{constructor(e,t){this.answer=null,this.variable_name=e,this.question_text=t}store_answer(){let e=document.getElementById(this.variable_name);this.answer=e.value}}class h extends c{constructor(e,t,r){super(e,t),this.alternatives=r}input_html(){let e='<select id="'+this.variable_name+'">',t=0;return this.alternatives.forEach((r=>e+="<option value="+t+++">"+r+"</option>")),e+="</select>",e}store_answer(){let e=document.getElementById(this.variable_name);this.answer=this.alternatives[e.value]}}class _ extends c{html_string(){}input_html(){return'<input type="text" id="'+this.variable_name+'">'}}class p extends n{constructor(e,t){super("Questionnaire",t,(()=>t.output_writer().print_html_on_stage("Please, answer the following questions.<br>")),(()=>t.output_writer().print_html_on_stage("Thank you for answering the questions."))),this.current_question_number=-1,this.questions=e}automata_configurator(){return new s([0,1,2,3,4],0,(()=>{}),this.transitions(),[4])}transitions(){return[u(0).to(4).on("DONE").if((e=>!0)).do((e=>{this.add_result_to_question(),console.log("dummy")}))]}show_intro(){super.show_intro();let e=this.create_questionnaire_html_string();this.output_writer().print_html_on_stage(e),document.getElementById("DONE").onclick=()=>this.input("DONE")}show_outro(){}create_questionnaire_html_string(){let e="<fieldset><legend>Questionnaire</legend><div display: inline-block;><table>";return this.questions.forEach((t=>e+="<tr><td>"+t.question_text+"</td><td>"+t.input_html()+"</td></tr>")),e+="</table></div></fieldset><br><button id='DONE'>Ok - all questions answered</button>",e}add_result_to_question(){for(let e of this.questions)e.store_answer()}}var d;!function(e){e[e.STRING=1]="STRING",e[e.NUMBER=2]="NUMBER"}(d||(d={}));class m{constructor(e){this.input_type=e}accepted_responses(){return this.input_type.accepted_responses()}given_answer(e){return this.input_type.given_answer(e)}start_measurement(e){this.start_time=(new Date).getTime().valueOf(),e.print_task()}stop_measurement(e,t){let r=(new Date).getTime().valueOf();t.given_answer=this.input_type.get_given_answer(e),t.required_milliseconds=r-this.start_time,t.do_print_after_task_information()}incorrect_response(e,t){let r=(new Date).getTime().valueOf(),n=t.experiment_definition.measurement.get_given_answer(e);t.invalid_answers.push([n,r-this.start_time]),t.do_print_error_message(this.input_type.get_given_answer(e))}output_writer(){return this.input_type.output_writer}get_given_answer(e){return this.input_type.get_given_answer(e)}demands_penalty(){return!1}penalty_is_over(){return!0}}class g extends m{constructor(e){super(e)}}class f extends m{constructor(e,t){super(e),this.penalty_started=!1,this.penalty_start_point=null,this.penalty_miliseconds=1e3*t}demands_penalty(){return!0}incorrect_response(e,t){super.incorrect_response(e,t),this.penalty_started=!0,this.penalty_start_point=(new Date).getTime().valueOf(),t.do_print_error_message(this.input_type.get_given_answer(e))}delete_penalty(){this.penalty_started=!1,this.penalty_start_point=null}penalty_is_over(){let e=(new Date).getTime().valueOf()-this.start_time;return!this.penalty_started||e>=this.penalty_miliseconds}start_measurement(e){super.start_measurement(e),this.delete_penalty()}}class w extends m{constructor(e){super(e)}}class b extends w{constructor(e,t){super(e),this.penalty_started=!1,this.penalty_start_point=null,this.penalty_miliseconds=1e3*t}demands_penalty(){return!0}incorrect_response(e,t){super.incorrect_response(e,t),this.penalty_started=!0,this.penalty_start_point=(new Date).getTime().valueOf(),t.do_print_error_message(this.input_type.get_given_answer(e))}delete_penalty(){this.penalty_started=!1,this.penalty_start_point=null}penalty_is_over(){let e=(new Date).getTime().valueOf()-this.start_time;return!this.penalty_started||e>=this.penalty_miliseconds}start_measurement(e){super.start_measurement(e),this.delete_penalty()}}class y{constructor(e){this.output_writer=e}print_input_request(){this.output_writer.ask_for_input()}get_given_answer(e){return this.output_writer.get_given_answer(e)}}class v extends y{constructor(e,t){super(t),this.accepted_keys=e}accepted_responses(){return this.accepted_keys}given_answer(e){return e}print_input_request(){}get_given_answer(e){return e}}class k extends y{constructor(e){super(e)}accepted_responses(){return["Enter"]}given_answer(e){}}const x=new class{constructor(){Math.seedrandom("1234567890")}new_random_integer(e){return Math.trunc(e*Math.random())}set_seed(e){Math.seedrandom(e)}};function E(e){return x.new_random_integer(e)}var q;!function(e){e[e.STRING=1]="STRING",e[e.NUMBER=2]="NUMBER"}(q||(q={}));class T{convert_string_to_html_string(e){return function(e){return e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;").replace(/'/g,"&#39;").replace(/\n/g,"<br/>").replace(/ /g,"&nbsp;")}(e)}string_page_command(e){return()=>this.print_string_on_stage(e)}stage_string_pages_commands(e){let t=[];for(let r of e)t.push(this.string_page_command(r));return t}get_given_answer(e){return e}print_on_input_response(e){}set_focus_on_input(){}clear_all(){this.clear_state(),this.clear_stage()}}const j=new class{constructor(){Math.seedrandom("1234567890")}new_random_integer(e){return Math.trunc(e*Math.random())}set_seed(e){Math.seedrandom(e)}};function C(e){return j.new_random_integer(e)}function R(e){return e[C(e.length)]}class S{constructor(e,t,r){this.expected_answer="",this.given_answer="",this.required_milliseconds=null,this.task_number_in_execution=-1,this.invalid_answers=[],this.is_training=!1,this.do_print_task=()=>{throw new Error("Method not implemented.")},this.do_print_error_message=()=>{throw new Error("Method not implemented.")},this.accepts_answer_function=e=>!0,this.do_print_after_task_information=()=>{throw new Error("Method not implemented.")},this.treatment_combination=e,this.experiment_definition=t}accepts_answer(e){let t=this.experiment_definition.measurement.get_given_answer(e);return this.accepts_answer_function(t)}next_task(){return this.task_number_in_execution<this.experiment_definition.tasks.length?this.experiment_definition.tasks[this.task_number_in_execution]:null}html_string_with_cmd(e,t){}html_node_with_cmd(e,t){}after_task_string_constructor(e){}print_task(){this.do_print_task(),this.print_input_request()}print_input_request(){this.experiment_definition.measurement.input_type.print_input_request()}}class A{constructor(e,t,r,n,s){this.questionnaires=[],this.tasks=[],this.repetitions=1,this.template={experiment_name:e,variables:t,repetitions:r,task_creator:s},this.experiment_name=e,this.variables=t,this.repetitions=r,this.measurement=n,this.task_creator=s}init_experiment(e){this.createTasks(e),this.do_random_task_ordering()}createTasks(e){this.tasks=[],this.all_treatment_combinations_do((t=>{let r=this.create_Task(this.cloned_treatment_combinations(t));this.task_creator(r),r.is_training=e,this.tasks.push(r)}))}cloned_treatment_combinations(e){let t=[];return e.forEach((e=>t.push(e.clone()))),t}all_treatment_combinations_do(e){for(let t=1;t<=this.repetitions;t++)this.variables[0].all_treatment_combinations_do([],this.variables.slice(1),e)}do_random_task_ordering(){let e=[],t=this.tasks.slice(),r=1;for(;e.length<this.tasks.length;){let n=C(t.length);e.push(t[n]),t[n].task_number_in_execution=r,t.splice(n,1),r++}this.tasks=e}generate_csv_data(){let e=[];for(let t of this.questionnaires)for(let r of t.questions)e.push('"'+r.variable_name+'";');for(let t of this.variables)e.push(t.name+";");e.push("number_of_given_answers;expected_answer;given_answer;is_correct;time_in_milliseconds;\n");for(let t of this.tasks){for(let t of this.questionnaires)for(let r of t.questions)e.push('"'+r.answer+'";');for(let r of t.treatment_combination)e.push(r.value+";");e.push(t.invalid_answers.length+1+";"),e.push(t.expected_answer+";"),e.push(t.given_answer+";"),e.push((t.given_answer==t.expected_answer)+";"),e.push(t.required_milliseconds+";"),t.invalid_answers.forEach((t=>e.push(t[0]+";"+t[1]+";"))),e.push("\n")}return e}}class O extends n{constructor(e,t,r){super(e,r,t[0],t[t.length-1]),this.current_page_number=-1,this.pages=t,this.create_automata()}set_page_index(e){this.current_page_number=e,this.empty_screen_and_show_instructions(this.pages[this.current_page_number]),this.output_writer().print_string_to_state(this.forwarder_name),this.output_writer().print_string_to_page_number("Page "+(this.current_page_number+1)+" / "+this.pages.length);let t="<hr>";e>0&&(t+="[&#8592] = previous page"),e<this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[&#8594] = next page"),e==this.pages.length-1&&(t+=("<hr>"!=t?"<br>":"")+"[Enter] = Finish"),this.output_writer().print_html_on_stage(t)}set_active(){super.set_active()}show_intro(){this.set_page_index(0)}show_outro(){}automata_configurator(){return new s([0,1],0,(()=>{}),this.transitions(),[1])}transitions(){return[u(0).to(0).on("ArrowRight").if((e=>this.current_page_number<this.pages.length-1)).do((e=>{this.set_page_index(++this.current_page_number)})),u(0).to(0).on("ArrowLeft").if((e=>this.current_page_number>0)).do((e=>{this.set_page_index(--this.current_page_number)})),u(0).to(1).on("Enter").if((e=>this.current_page_number>=this.pages.length-1)).do((e=>{}))]}}class U extends t{constructor(e){super("Default Sequential Forwarder Forwader"),this.current_forwarder_index=0,this.forwarders=e;for(let t of e)t.automata.add_finish_action((()=>this.automata.input("switch to next state")));var t,n,i;this.automata=(t=[0,1],n=()=>{},i=[u(0).to(0).on("switch to next state").if((()=>this.current_forwarder_index<this.forwarders.length-1)).do((()=>{this.current_forwarder_index++,this.current_forwarder().set_active()})),u(0).to(1).on("switch to next state").if((()=>this.current_forwarder_index==this.forwarders.length-1)).do((()=>{}))],new r(new s(t,0,n,i,[1]))),this.automata.initialize()}input(e){this.forwarders[this.current_forwarder_index].input(e)}input_sequence(e){for(let t of e)this.input(t)}current_forwarder(){return this.forwarders[this.current_forwarder_index]}set_active(){super.set_active(),this.current_forwarder().set_active()}}class M{constructor(e,t){this.variable=e,this.value=""+t}clone(){return new M(this.variable,this.value)}}class z{constructor(e,t){this.treatments=[],this.name=e;for(let e of t)this.treatments.push(new M(this,e))}all_treatment_combinations_do(e,t,r){for(var n of this.treatments){let s=e.slice();s.push(n),0==t.length?r(s):t[0].all_treatment_combinations_do(s,t.slice(1),r)}}}class N extends n{show_intro(){this.empty_screen_and_show_instructions(this.pre_run_instructions),this.output_writer().print_experiment_name(this.forwarder_name)}show_outro(){this.empty_screen_and_show_instructions(this.post_run_instructions)}automata_configurator(){return new s([0,1,3,4,5],0,(()=>{}),this.transitions(),[5])}current_task(){return this.experiment_definition.tasks[this.current_page_index]}constructor(e,t,r,n,s){super(e,s,t,r),this.current_page_index=-1,this.experiment_definition=n}automata_configuration(){return new s([0,1,3,4,5],0,(()=>{}),this.transitions(),[5])}transitions(){return[u(0).to(1).on("Enter").do((e=>{console.log("Dummy Exp: Enter On Exp"),this.set_experiment_index(0),this.measurement.start_measurement(this.current_task())})),u(0).to(4).on("Delete").do((e=>{console.log("Dummy Exp: Delete On Exp"),this.show_outro()})),u(1).to(4).on("?+Control").if((e=>!0)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),u(1).to(3).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task())})),u(1).to(1).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&!this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),u(1).to(2).on_any(this.measurement.accepted_responses()).if((e=>!this.current_task().accepts_answer(e)&&this.measurement.demands_penalty())).do((e=>{this.measurement.incorrect_response(e,this.current_task())})),u(2).to(1).on("Enter").if((e=>this.measurement.penalty_is_over())).do((e=>{this.measurement.start_measurement(this.current_task())})),u(3).to(1).on("Enter").if((e=>this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.inc_current_experiment(),this.measurement.start_measurement(this.current_task())})),u(1).to(4).on_any(this.measurement.accepted_responses()).if((e=>this.current_task().accepts_answer(e)&&this.current_page_index==this.experiment_definition.tasks.length-1)).do((e=>{this.measurement.stop_measurement(e,this.current_task()),this.show_outro()})),u(4).to(5).on("Enter").do((e=>{}))]}set_experiment_index(e){this.current_page_index=e,this.output_writer().print_string_to_page_number("Task "+(this.current_page_index+1)+" / "+this.experiment_definition.tasks.length)}inc_current_experiment(){this.set_experiment_index(++this.current_page_index)}init_experiment(e){this.experiment_definition.init_experiment(e)}}class D extends N{constructor(e,t,r){super("Training",(()=>{e(),r.output_writer().print_html_on_stage("<hr>Press [Enter] to start training.")}),(()=>{r.output_writer().print_html_on_stage("You finished the training phase.<hr>Please, press [Enter] to run again a training session.<br>Please, press [E] (capital E!) to enter the experiment phase.")}),t,r)}print_cancel_text(){this.output_writer().clear_stage(),this.output_writer().print_string_to_page_number("Cancelled"),this.output_writer().print_html_on_stage("You cancelled this training session.<hr>Press [Enter] if you want to start another training session.<br>Press [E] (capital E!) if you want to start with the experiment.")}automata_configurator(){return new s([0,1,2,3,4,5,6],0,(()=>{}),this.transitions(),[5])}transitions(){let e=super.transitions(),t=[u(0).to(6).on("Escape").if((()=>!0)).do((e=>{this.print_cancel_text()})),u(1).to(6).on("Escape").do((e=>{this.print_cancel_text()})),u(3).to(6).on("Escape").if((()=>this.current_page_index<this.experiment_definition.tasks.length-1)).do((e=>{this.print_cancel_text()})),u(6).to(5).on("E").do((()=>{})),u(6).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),u(4).to(0).on("Enter").do((()=>{this.experiment_definition.init_experiment(!0),this.show_intro()})),u(4).to(5).on("E").do((e=>{}))];return e.splice(e.length-1),t.forEach((t=>e.push(t))),e}input(e){if(!["a","b","c"].includes(e)&&0!=this.automata.current_state)return super.input(e);super.input(e)}}class I extends N{constructor(e,t,r){super("Main Experiment",(()=>{e(),r.output_writer().print_html_on_stage("<hr>Press [Enter] to start the experiment.")}),(()=>{r.output_writer().print_html_on_stage("You finished the experiment phase.<hr>Please, press [Enter] to go to the next phase.<br>")}),t,r)}}class B extends A{create_code_all_experiment_automatas(e){e.measurement.output_writer();let t=new O("Introduction",e.introduction_texts,e.measurement),r=new O("Finish",e.finish_texts,e.measurement);r.automata.add_finish_action((()=>e.finish_function(n.experiment_definition)));let n=new I(e.pre_run_experiment_output,this,e.measurement);var s;s=e.seed,j.set_seed(s),n.init_experiment(!1);let i=this.clone(),a=new D(e.pre_run_training_output,i,e.measurement);a.experiment_definition.init_experiment(!0);let o=null;null!=e.post_questionnaire&&(o=new p(e.post_questionnaire,e.measurement));let l=[];return null!=t&&l.push(t),l.push(a),l.push(n),null!=o&&(l.push(o),n.experiment_definition.questionnaires.push(o)),l.push(r),new U(l)}clone(){return new B(this.template.experiment_name,this.template.variables,this.template.repetitions,this.measurement,this.template.task_creator)}create_Task(e){return new S(e,this,"")}}class P extends T{print_experiment_name(e){this.get_html_element_by_id("STATE").innerHTML=e}clear_error(){let e=["STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_stage(){let e=["STAGE","STAGE_MSG","STAGE_ERROR"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}clear_state(){let e=["STATE","TASK"];for(let t of e){let e=document.getElementById(t);for(;e.firstChild;)e.removeChild(e.firstChild)}}print_error_string_on_stage(e){this.get_html_element_by_id("STAGE_ERROR").innerHTML=e}get_html_element_by_id(e){return document.getElementById(e)}print_string_to_state(e){this.get_html_element_by_id("STATE").innerHTML=e}print_string_on_stage(e){this.print_html_on_stage("<p>"+e+"</p>")}ask_for_input(){let e=document.createElement("p"),t=document.createElement("label");t.setAttribute("type","text"),e.textContent="Answer: ",e.appendChild(t);let r=document.createElement("input");r.setAttribute("type","text"),r.setAttribute("class","input"),e.appendChild(r),r.id="INPUT",this.get_html_element_by_id("STAGE").appendChild(e),r.focus()}set_focus_on_input(){this.get_html_element_by_id("INPUT").focus()}print_string_to_page_number(e){this.get_html_element_by_id("TASK").innerHTML=e}get_given_answer(){return this.get_html_element_by_id("INPUT").value}print_on_input_response(e){this.get_html_element_by_id("INPUT").value=e}create_html_element_from_string(e){return(new DOMParser).parseFromString(e,"text/html").body}print_html_on_stage(e){this.get_html_element_by_id("STAGE").appendChild(this.create_html_element_from_string(e))}print_html_on_error(e){this.get_html_element_by_id("STAGE_ERROR").appendChild(this.create_html_element_from_string(e))}}function L(e,t="",r=!1){if(!e)throw console.error(t),"Wrong: "+t;r&&console.log("Ok: "+t)}class G{constructor(e,t){this.content=null,this.left=null,this.right=null,this.parent=null,this.left=e,null!=e&&(this.left.parent=this),this.right=t,null!=t&&(this.right.parent=this)}is_left_child(){return null!=this.parent&&this.parent.left==this}is_right_child(){return null!=this.parent&&this.parent.right==this}number_of_nodes(){return 1+(null!=this.left?this.left.number_of_nodes():0)+(null!=this.right?this.right.number_of_nodes():0)}number_of_inner_nodes(){return this.is_leave()?0:1+(null!=this.left?this.left.number_of_inner_nodes():0)+(null!=this.right?this.right.number_of_inner_nodes():0)}source_string(){let e=[];return this.source_string_writer(e),e.join("")}source_string_writer(e){this.is_leave()?e.push(this.content):(e.push("("),null!=this.left&&this.left.source_string_writer(e),e.push(this.content),null!=this.right&&this.right.source_string_writer(e),e.push(")"))}clone(){let e=null!=this.left?this.left.clone():this.left,t=null!=this.right?this.right.clone():this.right,r=new G(e,t);return r.content=null==this.content?null:this.content.clone(),r}push_leaves(){null!=this.left?this.left.push_leaves():(this.left=new G(null,null),this.left.parent=this),null!=this.right?this.right.push_leaves():(this.right=new G(null,null),this.right.parent=this)}as_in_order_array(){let e=[];return this.as_in_order_array_writer(e),e}as_in_order_array_writer(e){null!=this.left&&this.left.as_in_order_array_writer(e),e.push(this),null!=this.right&&this.right.as_in_order_array_writer(e)}set_all_operator_values(e){let t=this.as_in_order_array();t=t.filter((e=>!e.is_leave())),t.forEach((t=>t.content=e))}set_all_leave_values(e){let t=this.as_in_order_array();t=t.filter((e=>e.is_leave())),t.forEach((t=>t.content=e))}is_leave(){return null==this.left&&null==this.right}call_by_value_order(){let e=[];return this.call_by_value_order_writer(e),e}call_by_value_order_writer(e){this.is_leave()||(null!=this.left&&this.left.call_by_value_order_writer(e),null!=this.right&&this.right.call_by_value_order_writer(e)),e.push(this)}has_child(e){return this===e||!(null==this.left||!this.left.has_child(e))||!(null==this.right||!this.right.has_child(e))}}function F(e){let t=[];return K(e,t),t}function K(e,t){if(0!=e)if(1!=e)for(let r=0;r<e;r++){let n=e-r-1,s=[],i=[];K(r,s),K(n,i);for(let e=0;e<s.length;e++)for(let r=0;r<i.length;r++)t.push(new G(s[e],i[r]))}else t.push(new G(null,null));else t.push(null)}!function(){let e=[];e=F(1),L(1==e.length,"Catalan number 1 = 1"),e=F(2),L(2==e.length,"Catalan number 2 = 2"),e=F(3),L(5==e.length,"Catalan number 3 = 5"),e=F(4),L(14==e.length,"Catalan number 4 = 14"),e=F(5),L(42==e.length,"Catalan number"),e=F(6),L(132==e.length,"Catalan number"),e=F(7),L(429==e.length,"Catalan number"),e=F(8),L(1430==e.length,"Catalan number"),e=F(9),L(4862==e.length,"Incorrect Catalan number"),console.log("Catalan numbers seem ok.")}();class H{constructor(e){this.values=[],this.values=new Array(e).fill(null)}do_matching(e,t,r){let n=this.clone(),s=e.clone(),i=!1,a=!1;for(let o=0;o<t.length;o++){let l=this.values[t[o]],u=e.values[r[o]];if(l!==u)if(null===l)n.values[t[o]]=u,i=!0;else{if(null!==u)return{matches:!1,left:null,has_left_variable_replacements:!1,right:null,has_right_variable_replacements:!1};s.values[r[o]]=l,a=!0}}return{matches:!0,left:n,has_left_variable_replacements:i,right:s,has_right_variable_replacements:a}}clone(){let e=new H(this.number_of_variables),t=[];for(let e of this.values)t.push(e);return e.values=t,e}do_print(){console.log(this.values.join(", "))}}class Y{static Empty_Logical_Results(e){let t=new Y(e);return t.rows=[],t}static Logical_Results_FROM_SOLUTION_ARRAY(e,t){let r=Y.Empty_Logical_Results(e);for(let e of t)r.add_solution_array(e);return r}constructor(e){this.rows=[],this.rows.push(new H(e))}has_contradiction(){return 0===this.rows.length}add_solution_array(e){let t=new H(this.number_of_variables);t.values=[...e],this.rows.push(t)}unify_results(e,t,r){1==this.rows.length&&null==this.rows[0]&&console.log("stop");let n=[],s=[],i=[],a=[],o=0;for(let l of this.rows){o++;let u=0;for(let c of e.rows){u++;let e=null;try{e=l.do_matching(c,t,r)}catch(n){throw e=l.do_matching(c,t,r),"something is wrong"}e.matches&&(i.includes(o)||(n.push(e.left),e.has_left_variable_replacements||i.push(o)),a.includes(u)||(s.push(e.right),e.has_right_variable_replacements||e.has_right_variable_replacements||a.push(u)))}}this.rows=n,e.rows=s}do_print(){for(let e of this.rows)e.do_print()}solutions(){return this.rows}random_result_for_column(e){let t=new Y(this.number_of_variables);return t.rows=[this.random_row_for_random_column_value(2)],t}random_row_for_random_column_value(e){let t=R(this.elements_of_column_with_unique_results(e)),r=R(this.rows_with_value_matching(e,t));return this.rows[r]}elements_of_column_with_unique_results(e){let t=[];return this.rows.forEach((r=>{let n=r.values[e];t.includes(n)||t.push(n)})),t}rows_with_value_matching(e,t){let r=[];for(let n=0;n<this.rows.length;n++)this.rows[n].values[e]==t&&r.push(n);return r}}function Q(e,t){let r=new Y(e);r.rows=[];for(let n of t){let t=new H(e);t.values=[];for(let e in n){let r=n[e];t.values.push(r)}r.rows.push(t)}return r}var V;!function(){let e,t;e=Q(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),t=Q(2,[{x:2,y:3}]),e.unify_results(t,[1,2],[0,1]),L(2==e.rows.length&&1==t.rows.length,"Unify 1 (all right): with possibly double entries right "+e.rows.length+" -- "+t.rows.length),e=Q(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),t=Q(2,[{x:2,y:3},{x:3,y:3}]),e.unify_results(t,[1,2],[0,1]),L(4==e.rows.length&&2==t.rows.length,"Unify 2 (all right): with possibly double entries right "+e.rows.length+" -- "+t.rows.length),e=Q(6,[{a:1,b:2,c:3,d:4,e:5,f:1},{a:1,b:2,c:3,d:4,e:5,f:2},{a:1,b:3,c:3,d:4,e:5,f:3},{a:1,b:3,c:3,d:4,e:5,f:4}]),t=Q(2,[{x:2,y:3}]),e.unify_results(t,[1],[0]),L(2==e.rows.length&&1==t.rows.length,"Unify 3 (only subset right): with possibly double entries right "+e.rows.length+" -- "+t.rows.length),t=Q(6,[{x:2,y:3}]),e=Q(6,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),t=Q(6,[{x:2}]),e.unify_results(t,[1],[0]),L(2==e.rows.length&&1==t.rows.length,"Unify 4 (on unbound variable left) "+e.rows.length+" -- "+t.rows.length),L(2===e.rows[0].values[1],"Unify 3 (unbounded becomes bounded) "+e.rows.length+" -- "+t.rows.length),e=Q(2,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),t=Q(2,[{x:2},{x:3}]),e.unify_results(t,[1],[0]),L(4===e.rows.length&&2==t.rows.length,"Unify 5 (multiple variable bindings) "+e.rows.length+" -- "+t.rows.length),L(2===e.rows[0].values[1],"Unify 5 (multiple variable bindings - unbounded variable is now bounded"),e=Q(2,[{a:1,b:null,c:3,d:4,e:5,f:6},{a:1,b:null,c:3,d:4,e:5,f:6}]),t=Q(1,[{x:null}]),e.unify_results(t,[1],[0]),L(2==e.rows.length&&1==t.rows.length,"Unify 6 (unifying unbounded variables) "+e.rows.length+" -- "+t.rows.length),L(null===e.rows[0].values[1],"Unify 6 (multiple variable bindings - unbounded variable is now bounded - 1st"),L(null===t.rows[0].values[0],"Unify 6 (multiple variable bindings - unbounded variable is now bounded - 2nd"),e=new Y(3),t=Q(1,[{x:1},{x:2},{x:3}]),e.unify_results(t,[1],[0]),L(3==e.rows.length&&3==t.rows.length,"Unify 7 "+e.rows.length+" -- "+t.rows.length),e=function(){let e=new Y(6);e.rows=[];for(let t of[[1,2,3,4,5,6],[1,3,3,4,5,6]]){let r=new H(6);r.values=[];for(let e of t)r.values.push(e);e.rows.push(r)}return e}(),t=new Y(3),e.unify_results(t,[1],[0]),L(2==e.rows.length&&2==t.rows.length,"Unify 8 "+e.rows.length+" -- "+t.rows.length),L(2===e.rows[0].values[1],"Unify 8 (multiple variable bindings - unbounded variable is now bounded - 1st"),L(3===e.rows[1].values[1],"Unify 8 (multiple variable bindings - unbounded variable is now bounded - 2nd")}(),console.log("ok, logic programming seems to work."),(V=Nof1).SET_SEED=function(e){x.set_seed(e)},V.new_random_integer=E,V.BROWSER_EXPERIMENT=function(e){let t=new P,r=e(t),n=r.measurement(t),s=function(e){let t=[];for(let r of e.layout)t.push(new z(r.variable,r.treatments));return new B(e.experiment_name,t,e.repetitions,e.measurement,e.task_configuration).create_code_all_experiment_automatas({seed:e.seed,introduction_texts:e.introduction_pages,post_questionnaire:e.post_questionnaire,pre_run_training_output:e.pre_run_training_output,pre_run_experiment_output:e.pre_run_experiment_output,finish_texts:e.finish_pages,measurement:e.measurement,finish_function:e.finish_function})}({experiment_name:r.experiment_name,seed:r.seed,introduction_pages:r.introduction_pages,post_questionnaire:r.post_questionnaire,pre_run_training_output:r.pre_run_training_instructions,pre_run_experiment_output:r.pre_run_experiment_instructions,finish_pages:r.finish_pages,layout:r.layout,repetitions:r.repetitions,task_configuration:r.task_configuration,measurement:n,finish_function:e=>{document.removeEventListener("keydown",i),function(e,t){const r=new Blob(t,{type:"application/ssc"}),n=window.document.createElement("a");n.href=window.URL.createObjectURL(r),n.download="experimentdata.csv",document.body.appendChild(n),n.click(),document.body.removeChild(n)}(0,e.generate_csv_data())}}),i=e=>{let t=(n="","Alt"==(r=e).key&&r.ctrlKey?"Alt+Ctrl":"Control"==r.key&&r.altKey?"Ctrl+Alt":(n+=r.altKey?"+Alt":"",n+=r.ctrlKey?"+Control":"","Alt"==r.key?"Alt":""+r.key+n));var r,n;s.input(t)};document.addEventListener("keydown",i,!1),s.set_active()},V.text_input_experiment=function(e){return new k(e)},V.new_random_integer=E,V.Time_to_finish=function(e){return t=>new w(e(t))},V.Time_to_finish_with_penality=function(e,t){return r=>new b(e(r),t)},V.Reaction_time=function(e){return t=>new g(e(t))},V.Reaction_time_with_penalty=function(e,t){return r=>new f(e(r),t)},V.keys=function(e){return t=>new v(e,t)},V.Nouns=class{constructor(){this.words=["account","achiever","acoustics","act","action","activity","actor","addition","adjustment","advertisement","advice","aftermath","afternoon","afterthought","agreement","air","airplane","airport","alarm","amount","amusement","anger","angle","animal","ants","apparatus","apparel","appliance","approval","arch","argument","arithmetic","arm","army","art","attack","attraction","aunt","authority","back","badge","bag","bait","balance","ball","base","baseball","basin","basket","basketball","bat","bath","battle","bead","bear","bed","bedroom","beds","bee","beef","beginner","behavior","belief","believe","bell","bells","berry","bike","bikes","bird","birds","birth","birthday","bit","bite","blade","blood","blow","board","boat","bomb","bone","book","books","boot","border","bottle","boundary","box","brake","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","branch","brass","breath","brick","bridge","brother","bubble","bucket","building","bulb","burst","bushes","business","butter","button","cabbage","cable","cactus","cake","cakes","calculator","calendar","camera","camp","can","cannon","canvas","cap","caption","car","card","care","carpenter","carriage","cars","cart","cast","cat","cats","cattle","cause","cave","celery","cellar","cemetery","cent","chalk","chance","change","channel","cheese","cherries","cherry","chess","chicken","chickens","chin","church","circle","clam","cloth","clover","club","coach","coal","coast","coat","cobweb","coil","collar","color","committee","company","comparison","competition","condition","connection","control","cook","copper","corn","cough","country","cover","cow","cows","crack","cracker","crate","crayon","cream","creator","creature","credit","crib","crime","crook","crow","crowd","crown","cub","cup","current","curtain","curve","cushion","dad","daughter","day","death","debt","decision","deer","degree","design","desire","desk","destruction","detail","development","digestion","dime","dinner","dinosaurs","direction","dirt","discovery","discussion","distance","distribution","division","dock","doctor","dog","dogs","doll","dolls","donkey","door","downtown","drain","drawer","dress","drink","driving","drop","duck","ducks","dust","ear","earth","earthquake","edge","education","effect","egg","eggnog","eggs","elbow","end","engine","error","event","example","exchange","existence","expansion","experience","expert","eye","eyes","face","fact","fairies","fall","fang","farm","fear","feeling","field","finger","fire","fireman","fish","flag","flame","flavor","flesh","flight","flock","floor","flower","flowers","fly","fog","fold","food","foot","force","fork","form","fowl","frame","friction","friend","friends","frog","frogs","front","fruit","fuel","furniture","gate","geese","ghost","giants","giraffe","glass","glove","gold","government","governor","grade","grain","grandfather","grandmother","grape","grass","grip","ground","group","growth","guide","guitar","gun","hair","haircut","hall","hammer","hand","hands","harbor","harmony","hat","head","health","heat","hill","history","hobbies","hole","holiday","home","honey","hook","hope","horn","horse","horses","hose","hospital","hot","hour","house","houses","humor","hydrant","ice","icicle","idea","impulse","income","increase","industry","ink","insect","instrument","insurance","interest","invention","iron","island","jail","jam","jar","jeans","jelly","jellyfish","jewel","join","judge","juice","jump","kettle","key","kick","kiss","kittens","kitty","knee","knife","knot","knowledge","laborer","lace","ladybug","lake","lamp","land","language","laugh","leather","leg","legs","letter","letters","lettuce","level","library","limit","line","linen","lip","liquid","loaf","lock","locket","look","loss","love","low","lumber","lunch","lunchroom","machine","magic","maid","mailbox","man","marble","mark","market","mask","mass","match","meal","measure","meat","meeting","memory","men","metal","mice","middle","milk","mind","mine","minister","mint","minute","mist","mitten","mom","money","month","moon","morning","mother","motion","mountain","mouth","move","muscle","name","nation","neck","need","needle","nerve","nest","night","noise","north","nose","note","notebook","number","nut","oatmeal","observation","ocean","offer","office","oil","orange","oranges","order","oven","page","pail","pan","pancake","paper","parcel","part","partner","party","passenger","payment","peace","pear","pen","pencil","person","pest","pet","pets","pickle","picture","pie","pies","pig","pigs","pin","pipe","pizzas","place","plane","planes","plant","plantation","plants","plastic","plate","play","playground","pleasure","plot","plough","pocket","point","poison","pollution","popcorn","porter","position","pot","potato","powder","power","price","produce","profit","property","prose","protest","pull","pump","punishment","purpose","push","quarter","quartz","queen","question","quicksand","quiet","quill","quilt","quince","quiver","rabbit","rabbits","rail","railway","rain","rainstorm","rake","range","rat","rate","ray","reaction","reading","reason","receipt","recess","record","regret","relation","religion","representative","request","respect","rest","reward","rhythm","rice","riddle","rifle","ring","rings","river","road","robin","rock","rod","roll","roof","room","root","rose","route","rub","rule","run","sack","sail","salt","sand","scale","scarecrow","scarf","scene","scent","school","science","scissors","screw","sea","seashore","seat","secretary","seed","selection","self","sense","servant","shade","shake","shame","shape","sheep","sheet","shelf","ship","shirt","shock","shoe","shoes","shop","show","side","sidewalk","sign","silk","silver","sink","sister","sisters","size","skate","skin","skirt","sky","slave","sleep","sleet","slip","slope","smash","smell","smile","smoke","snail","snails","snake","snakes","sneeze","snow","soap","society","sock","soda","sofa","son","song","songs","sort","sound","soup","space","spade","spark","spiders","sponge","spoon","spot","spring","spy","square","squirrel","stage","stamp","star","start","statement","station","steam","steel","stem","step","stew","stick","sticks","stitch","stocking","stomach","stone","stop","store","story","stove","stranger","straw","stream","street","stretch","string","structure","substance","sugar","suggestion","suit","summer","sun","support","surprise","sweater","swim","swing","system","table","tail","talk","tank","taste","tax","teaching","team","teeth","temper","tendency","tent","territory","test","texture","theory","thing","things","thought","thread","thrill","throat","throne","thumb","thunder","ticket","tiger","time","tin","title","toad","toe","toes","tomatoes","tongue","tooth","toothbrush","toothpaste","top","touch","town","toy","toys","trade","trail","train","trains","tramp","transport","tray","treatment","tree","trees","trick","trip","trouble","trousers","truck","trucks","tub","turkey","turn","twig","twist","umbrella","uncle","underwear","unit","use","vacation","value","van","vase","vegetable","veil","vein","verse","vessel","vest","view","visitor","voice","volcano","volleyball","voyage","walk","wall","war","wash","waste","watch","water","wave","waves","wax","way","wealth","weather","week","weight","wheel","whip","whistle","wilderness","wind","window","wine","wing","winter","wire","wish","wood","wool","word","work","worm","wound","wren","wrench","wrist","writer","writing","yak","yam","yard","yarn","year","yoke","zebra","zephyr","zinc","zipper","zoo"]}},V.Verbs=class{constructor(){this.words=["drip","touch","trouble","start","communicate","jog","order","strip","coach","relax","vanish","connect","shock","spray","radiate","spill","hate","rinse","seal","kiss","ask","train","handle","replace","cover","plan","jump","lick","jail","gather","comb","knit","drain","meddle","alert","ask","train","handle","replace","cover","plan","jump","lick","jail","gather","comb","knit","drain","meddle","alert","instruct","arrive","smash","worry","knock","satisfy","fade","time","record","hug","film","sip","request","miss","own","hook","unfasten","pop","drown","gaze","escape","hang","boil","discover","count","work","flower","precede","reproduce","blush","punish","hope","destroy","call","use","surprise","muddle","notice","confess","carry","lie","spell","heap","fasten","fire","flash","carve","accept","like","crush","rock","kill","joke","attempt","protect","concern","suit","appear","agree","sail","shrug","trace","rot","pretend","stir","chop","name","slow","injure","program","man","plant","examine","reply","face","promise","observe","copy","retire","mine","moan","attend","admire","command","learn","answer","prepare","impress","argue","whine","consist","interest","branch","bubble","realise","melt","walk","shop","squeeze","hum","tempt","spoil","remove","race","doubt","step","judge","desert","tap","afford","part","deliver","float","apologise","switch","share","phone","applaud","print","note","wreck","scream","follow","blink","arrange","sign","guarantee","stain","wash","lighten","tame","change","laugh","brake","tick","hammer","mate","mourn","smell","close","invite","rain","warm","occur","puncture","memorise","slap","terrify","check","delight","bolt","cross","settle","spare","type","guard","back","bore","poke","preach","fear","grin","approve","level","wave","pedal","stitch","obey","compare","ski","paint","serve","consider","bare","shelter","risk","bat","rub","double","mix","appreciate","disapprove","exercise","remember","smile","invent","enjoy","clear","cry","dress","flow","skip","empty","decorate","soak","suffer","produce","place","dream","guess","whip","burn","interfere","jam","trick","lock","talk","queue","tickle","complete","stuff","sound","confuse","introduce","amuse","paste","travel","number","water","scrape","correct","borrow","behave","snore","wink","excite","attract","mess up","reflect","camp","mark","tumble","soothe","point","disagree","provide","suspect","license","return","sparkle","buzz","juggle","continue","list","cure","nest","post","try","preserve","offend","challenge","develop","spark","enter","cause","identify","curl","frighten","tremble","peck","describe","squeak","remind","rob","sneeze","turn","listen","frame","rely","last","twist","reduce","tie","grease","welcome","rush","charge","dance","refuse","expect","embarrass","unite","disappear","ban","grate","bomb","pat","bless","hand","reign","strengthen","overflow","balance","announce","squash","pick","regret","unlock","spot","wrap","waste","remain","drop","scrub","flap","dislike","dare","x-ray","compete","repair","pour","harass","join","multiply","chase","sack","moor","fold","tug","receive","flood","prick","kick","fail","expand","fill","sin","wonder","decay","subtract","fax","signal","shade","curve","greet","clip","irritate","tip","depend","want","beg","file","earn","recognise","supply","dry","exist","collect","add","form","drum","deceive","zoom","march","annoy","murder","watch","heat","fry","dust","bleach","separate","bury","saw","polish","wriggle","stay","wish","brush","trip","weigh","colour","test","blot","open","itch","zip","wobble","paddle","cheer","extend","nod","yell","fix","dam","fetch","transport","visit","found","load","interrupt","long","tour","suppose","stretch","store","raise","pray","pine","divide","happen","punch","bang","stamp","yawn","disarm","question","obtain","haunt","admit","stop","ruin","influence","scold","pass","whisper","groan","succeed","need","mug","analyse","telephone","rescue","wipe","marry","advise","pump","explode","fence","crawl","bow","improve","thank","attack","manage","support","reject","tow","cheat","perform","educate","warn","grab","stroke","drag","move","peel","roll","knot","unpack","nail","possess","trade","pack","fool","kneel","blind","prefer","object","encourage","match","inform","bounce","wander","boast","beam","fit","present","squeal","treat","repeat","launch","fancy","label","explain","increase","land","choke","excuse","wrestle","screw","report","measure","sigh","harm","scratch","cough","imagine","mend","save","scatter","breathe","decide","rule","avoid","calculate","box","peep","detect","contain","grip","release","crack","offer","undress","whirl","permit","live","force","sprout","entertain","pinch","glue","love","hunt","scare","push","coil","untidy","bruise","wait","damage","sniff","trust","belong","crash","attach","pause","heal","battle","pull","plug","end","snow","bake","bump","deserve","intend","prevent","hurry","practise","play","reach","clap","delay","chew","matter","book","complain","milk","care","concentrate","strap","tire","cycle","trot","taste","scribble","hover","look","ignore","suck","hop","trap","shave","glow","owe","guide","press","head","whistle","snatch","rhyme","please","scorch","suspend","wail","smoke","thaw","arrest","stare","slip","clean","claim","suggest","surround","bathe","steer","search","park","inject","employ","shiver","tease","rejoice","allow","include","help"]}},V.create_catalan_graphs=F,V.Logical_Results=Y,V.array_of_rows_to_logical_result=Q,V.free_text=function(e,t){return new _(e,t)},V.alternatives=function(e,t,r){return new h(e,t,r)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,